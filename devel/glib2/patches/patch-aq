--- gio/gsocket.c.orig	Tue Nov 12 05:30:22 2013
+++ gio/gsocket.c	Wed May  7 16:45:47 2014
@@ -37,6 +37,9 @@
 #include <signal.h>
 #include <string.h>
 #include <stdlib.h>
+#ifdef __NetBSD__
+#include <sys/un.h>
+#endif
 
 #ifndef G_OS_WIN32
 # include <fcntl.h>
@@ -1323,11 +1326,13 @@ g_socket_get_ttl (GSocket *socket)
       g_socket_get_option (socket, IPPROTO_IP, IP_TTL,
 			   &value, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (0);
 
@@ -1364,6 +1369,7 @@ g_socket_set_ttl (GSocket  *socket,
       g_socket_set_option (socket, IPPROTO_IP, IP_TTL,
 			   ttl, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_TTL,
@@ -1371,6 +1377,7 @@ g_socket_set_ttl (GSocket  *socket,
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_UNICAST_HOPS,
 			   ttl, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -1472,11 +1479,13 @@ g_socket_get_multicast_loopback (GSocket *socket)
       g_socket_get_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
 			   &value, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_LOOP,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -1517,6 +1526,7 @@ g_socket_set_multicast_loopback (GSocket    *socket,
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
 			   loopback, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_LOOP,
@@ -1524,6 +1534,7 @@ g_socket_set_multicast_loopback (GSocket    *socket,
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_LOOP,
 			   loopback, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -1561,11 +1572,13 @@ g_socket_get_multicast_ttl (GSocket *socket)
       g_socket_get_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
 			   &value, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_get_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS,
 			   &value, &error);
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -1603,6 +1616,7 @@ g_socket_set_multicast_ttl (GSocket  *socket,
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
 			   ttl, &error);
     }
+#ifndef __minix
   else if (socket->priv->family == G_SOCKET_FAMILY_IPV6)
     {
       g_socket_set_option (socket, IPPROTO_IP, IP_MULTICAST_TTL,
@@ -1610,6 +1624,7 @@ g_socket_set_multicast_ttl (GSocket  *socket,
       g_socket_set_option (socket, IPPROTO_IPV6, IPV6_MULTICAST_HOPS,
 			   ttl, &error);
     }
+#endif
   else
     g_return_if_reached ();
 
@@ -2053,6 +2068,7 @@ g_socket_multicast_group_operation (GSocket       *soc
       result = setsockopt (socket->priv->fd, IPPROTO_IP, optname,
 			   &mc_req, sizeof (mc_req));
     }
+#ifndef __minix
   else if (g_inet_address_get_family (group) == G_SOCKET_FAMILY_IPV6)
     {
       struct ipv6_mreq mc_req_ipv6;
@@ -2070,6 +2086,7 @@ g_socket_multicast_group_operation (GSocket       *soc
       result = setsockopt (socket->priv->fd, IPPROTO_IPV6, optname,
 			   &mc_req_ipv6, sizeof (mc_req_ipv6));
     }
+#endif
   else
     g_return_val_if_reached (FALSE);
 
@@ -4447,7 +4464,7 @@ g_socket_get_credentials (GSocket   *socket,
 
   ret = NULL;
 
-#if defined(__linux__) || defined(__OpenBSD__)
+#if defined(__linux__) || (defined(__OpenBSD__) && !defined(__MirBSD__))
   {
     socklen_t optlen;
 #if defined(__linux__)
@@ -4480,6 +4497,35 @@ g_socket_get_credentials (GSocket   *socket,
                                   G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED,
 #endif
                                   &native_creds);
+      }
+  }
+#elif defined(__NetBSD__) && defined(LOCAL_PEEREID)
+  {
+    struct unpcbid cred;
+    socklen_t len = sizeof(cred);
+    if (getsockopt(socket->priv->fd, 0, LOCAL_PEEREID, &cred, &len) < 0)
+      {
+	int errsv = get_socket_errno ();
+	g_set_error (error,
+		     G_IO_ERROR,
+		     socket_io_error_from_errno (errsv),
+		     _("Unable to get pending error: %s"),
+		     socket_strerror (errsv));
+      }
+    else
+      {
+	struct {
+		pid_t pid;
+		uid_t uid;
+		gid_t gid;
+	} native_creds;
+	native_creds.uid = cred.unp_euid;
+	native_creds.gid = cred.unp_egid;
+	native_creds.pid = cred.unp_pid;
+	ret = g_credentials_new ();
+	g_credentials_set_native (ret,
+				  G_CREDENTIALS_TYPE_LINUX_UCRED,
+				  &native_creds);
       }
   }
 #else
